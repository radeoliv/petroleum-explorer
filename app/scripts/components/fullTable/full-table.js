// Generated by CoffeeScript 1.7.1
(function () {
	var FullTable;
	/**
	 * @class FullTable
	 * @param SearchController with search results
	 * @param $tableContainer {*|jQuery} object for placeholder for table data
	 */
	FullTable = (function () {
		function FullTable(SearchController, $fullTableResultsContainer) {
			this.SearchController = SearchController;
			this.$fullTableResultsContainer = $fullTableResultsContainer;
			this.$tableContainer = $fullTableResultsContainer.find(".full-results-table");
			this.$contentContainer = $fullTableResultsContainer.find(".full-table-content");
			this.displayTable();
			this.listenChanges();
			this.toggleButton = $fullTableResultsContainer.find(".toggle-table").attr({
				"disabled": "disabled",
				"title": "Please specify coordinates to view data"
			});
			this.listenToggle();


		}

		/**
		 * Display all search results in table container using datatables
		 * @returns {*}
		 */
		FullTable.prototype.displayTable = function () {
			var data;
			//console.log("Call to display table");
			//console.dir(this.SearchController.resultSet);
			// Check if datatable has already been initialized.  If it is, then exit to avoid error
			if (this.$tableContainer.hasClass(".dataTable") === true) {
				return;
			}
			if(typeof(this.SearchController) != "undefined"){
				if (this.SearchController.resultSet.length > 0) {
					data = this.SearchController.resultSet;
					var table = this.$tableContainer.dataTable({
						data:    data,
						//bRetrieve for the popup window showing an error doesn"t always appear (not sure how it solves the problem though)
						bRetrieve: true,
						"dom": 'C<"clear">lfrtip',
						"oColVis": {
								   "activate": "mouseover"
						},
						columns: [
							{
								data: "H",
								title: "Thickness"
							},
							{
								data: "KRav",
								title: "Average Hydrocarbon Movability"
							},
							{
								data: "KRc",
								title: "Cumulative Hydrocarbon Movability"
							},
							{
								data: "PHIR",
								title: "Cumulative Pore Volume"
							},
							{
								data: "PHIc",
								title: "Cumulative Porosity"
							},
							{
								data: "Pc",
								title: "Effective Yield"
							},
							{
								data: "Pp",
								title: "Peak Value"
							},
							{
								data: "Pt",
								title: "Effective Life Cycle"
							},
							{
								data: "Soc",
								title: "Oil Saturation"
							},
							{
								data: "Well_Unique_Identifier_Simplified_Format",
								title: "UWI"
							},
							{
								data: "Vshc",
								title: "Cumulative Shale Content"
							},
							{
								data: "Well_Class",
								title: "Well Class"
							},
							{
								data: "Well_Drillers_Total_Depth",
								title: "Well Drillers Total Depth"
							},
							{
								data: "Well_Operator",
								title: "Company"
							},
							{
								data: "Well_Pool_Name",
								title: "Well Pool Name"
							},
							{
								data: "Well_Primary_Producing_Formation",
								title: "Primary Formation"
							},
							{
								data: "Well_Province",
								title: "Province"
							},
							{
								data: "Well_Status",
								title: "Status"
							},
							{
								data: "Well_Unique_Identifier",
								title: "Full UWI"
							},
							{
								data: "Well_Name",
								title: "Name"
							}
						]
					});
					var columns = table.api().settings().aoColumns;
					console.dir(columns);

					table.fnDraw(true); // TODO: Fix table not updating
					this.toggleButton.removeAttr("disabled").attr("title", "Toggle Full Table View").addClass("active");
					this.$contentContainer.dialog({
						title: 'Show results',
						draggable: true,
						resizable: true
					});
					// For debugging
					console.log("Attempting to create datatable with data");
					console.dir(this.SearchController.resultSet);
				}
			}
		};

		/**
		 * Toggle table update on `ResultsUpdated` event
		 * @returns {*|jQuery}
		 */
		FullTable.prototype.listenChanges = function () {
			return $("body").on("ResultsUpdated", (function (_this) {
				return function () {
					return _this.displayTable();
				};
			})(this));
		};

		/**
		 * Toggle full table data when clicking the button
		 * @returns {*}
		 */
		FullTable.prototype.listenToggle = function () {
			return this.toggleButton.on("click", (function (_this) {
				return function () {
					$(this).toggleClass("active");

					return _this.$contentContainer.slideToggle(); // go up one level for datatables wrapper
				};
			})(this));
		};

		return FullTable;

	})();

	(typeof exports !== "undefined" && exports !== null ? exports : window).FullTable = FullTable;

}).call(this);
