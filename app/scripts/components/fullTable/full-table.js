// Generated by CoffeeScript 1.7.1
(function () {
	var FullTable;

	function populateColumnFilter(tableColumns, html) {
		for (var i = 0;
			i < tableColumns.length;
			i++) {
			html += '<option>' + i + tableColumns[i].sTitle + '</option>';
		}
		var $columnSelect = this.$columnFilter.find("#tableColumnFilter").append(html);
	}

	function addNumberOption() {
		var labelForFilter = '<label value="'+$(this)[0].value+'">'+$(this).find("option:selected").text()+'</label></br>';

		var removeFilterOption = '<div class="filterBtnParent"><button type="button" class="filterButton minusButton"><i class="icon-minus"></i></button></div>';

		var constraintSelectTypeString = '<select><option value="matches">Matches</option><option value="contains">Contains</option></select>';

		var inputField = '<input class="filterInputField"><hr>';

		$('<div class="filterParameter">'+removeFilterOption+labelForFilter+constraintSelectTypeString+inputField+'</div>').appendTo($(this).parent());
	}

	function addStringOption() {
		var labelForFilter = '<label value="'+$(this)[0].value+'">'+$(this).find("option:selected").text()+'</label></br>';

		var removeFilterOption = '<div class="filterBtnParent"><button type="button" class="filterButton minusButton"><i class="icon-minus"></i></button></div>';

		var constraintSelectTypeNumber = '<select><option value="gt">Is Greater Than</option><option value="lt">Is Less Than</option><option value="eq">Is Equal To</option></select>';

		var inputField = '<input class="filterInputField"><hr>';

		$('<div class="filterParameter">'+removeFilterOption+labelForFilter+constraintSelectTypeNumber+inputField+'</div>').appendTo($(this).parent());
	}

	/**
	 * @class FullTable
	 * @param SearchController with search results
	 * @param $tableContainer {*|jQuery} object for placeholder for table data
	 */
	FullTable = (function () {
		function FullTable(SearchController, $fullTableResultsContainer) {
			this.SearchController = SearchController;
			this.$tableContainer = $fullTableResultsContainer.find(".full-results-table");
			this.$contentContainer = $fullTableResultsContainer.find(".full-table-content");
			this.$columnFilter = this.$contentContainer.find(".filter-form");
			this.toggleButton = $fullTableResultsContainer.find(".toggle-table");

			this.displayHandsOnTable();
			this.listenChanges();
			this.listenToggle();
			this.initColumnFilter();
			this.filterOptionRemove();
			this.$contentContainer.dialog("close");
		}

		FullTable.prototype.displayHandsOnTable = function() {

			this.$tableContainer.remove();

			var data;

			if(typeof(this.SearchController) != "undefined"){

				if (this.SearchController.resultSet.length > 0) {

					data = this.SearchController.resultSet;

					//plot results on google maps
					//self.mapCanvasController = new MapCanvasController().plotResults(data);

					this.$tableContainer = $('<div id="full-results-table" class="handsontable"></div>').appendTo(this.$contentContainer);

					this.$tableContainer.handsontable({
						data: data,
						colHeaders: ["Full UWI",
										"UWI",
										"Longitude",
										"Latitude",
										"Name",
										"Plot Symbol",
										"Well Name",
										"Well Drillers Total Depth",
										"Company",
										"Status",
										"Province",
										"Well Class",
										"Primary Formation",
										"Well Pool Name",
										"Cumulative Porosity",
										"Cumulative Pore Volume",
										"Cumulative Shale Content",
										"Oil Saturation",
										"Cumulative Hydrocarbon Movability",
										"Average Hydrocarbon Movability",
										"Thickness",
										"Effective Yield",
										"Peak Value",
										"Effective Life Cycle"],
						width: function(){
							return ($(".full-table-content").width() - $(".filter-form").width() - 10);
						},
						height: function(){
							return ($(".full-table-content").height() - 10);
						},
						readOnly: true,
						columnSorting: true,
						currentRowClassName: 'currentRow'

					});
					this.toggleButton.addClass("active");
					this.$contentContainer.dialog({
						title: 'Detailed Results',
						draggable: true,
						resizable: true,
						modal : true,
						autoOpen: true,
						width: 650,
						height: 400
					});
				}
			}
		}


		/**
		 * Toggle table update on `ResultsUpdated` event
		 * @returns {*|jQuery}
		 */
		FullTable.prototype.listenChanges = function () {
			return $("body").on("ResultsUpdated", (function (_this) {
				return function () {
					_this.displayHandsOnTable();
					_this.$contentContainer.dialog("close");
				};
			})(this));
		};

		/**
		 * Toggle full table data when clicking the button
		 * @returns {*}
		 */
		FullTable.prototype.listenToggle = function () {
			return this.toggleButton.on("click", (function (_this) {
				return function () {
					$(this).toggleClass("active");
					if ($(this).hasClass("active")) {
						$('#results-table').slideToggle();
						return _this.$contentContainer.dialog("close", _this.$contentContainer.fadeOut());
					}
					else {
						$('#results-table').slideToggle();
						return _this.$contentContainer.dialog("open", _this.$contentContainer.fadeIn());
					}
				};
			})(this));
		};

		FullTable.prototype.filterOptionRemove = function () {
			//TODO add filter parameter remove functionality.
		};

		/**
		 * Add individual option elements for each column in full table
		 */
		FullTable.prototype.initColumnFilter = function () {

			var i = 0;

			if (this.$columnFilter.length > 0) {
				//populateColumnFilter.call(this, tableColumns, html);
				var $columnSelectFilter = this.$columnFilter.find("#tableColumnFilter");
				var $addConstraintButton = this.$columnFilter.find("#add-constraint");

				/*
			 	// if the selector works...
				var tableColumns = this.$tableContainer.handsontable("getColHeader"),
									html, $columnSelectFilter,
									$addConstraintButton = this.$columnFilter.find(".add-constraint");
				*/

				// Check when the select element is changed, and NOT the default is selected, then add constraint filter
				$addConstraintButton.on("click", function() {
					switch($columnSelectFilter.val()) { // the current selected <option>
						case "0":
							console.log('No Option Chosen');
							break;
						// String Options
						case "Well_Operator":
						case "Well_Pool_Name":
						case "Well_Primary_Producing_Formation":
						case "Well_Province":
						case "Well_Status":
						case "Well_Unique_Identifier":
						case "Well_Name": // String Option
							i++;
							addStringOption.call($columnSelectFilter);
							break;
						default: // Numeric Options
							i++
							addNumberOption.call($columnSelectFilter);
						}

					console.log(i);
					console.log($columnSelectFilter.parent().find(".filterParameter"));
				});
			}
		}

		return FullTable;

	})();

	(typeof exports !== "undefined" && exports !== null ? exports : window).FullTable = FullTable;

}).call(this);
